import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook
import os
import logging

TOKEN = os.getenv('BOT_TOKEN')
HEROKU_APP_NAME = os.getenv('HEROKU_APP_NAME')

wh_host = f'https://{HEROKU_APP_NAME}.herokuapp.com'
wh_path = f'/webhook/{TOKEN}'
wh_url = f'{wh_host}{wh_path}'

user_data = {}
whapp_host = '0.0.0.0'
whapp_port = os.getenv('PORT', default=6666)

logging.basicConfig(level=logging.INFO)



# –∑–∞–ø–æ–ª–Ω—è—Ç—å tariffs —Å—Ç—Ä–æ–≥–æ –ø–æ –º–æ–¥–µ–ª–∏ tariffs = '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞': {'spec': ['1–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å', '2–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å', 'n-–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å'], 'price': —Ü–µ–Ω–∞}
tariffs = {
  '–û–±—ã—á–Ω—ã–π': {
    'spec': [
      '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
      '–≠–∫—Ä–∞–Ω (30 –¥—é–π–º–æ–≤)',
      '–£–¥–æ–±–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å üõè',
      '–§–∏–ª—å–º –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ üé¨',
      '–í–∏–Ω–æ Santo Stefano üç∑'
    ],
    'price': 1990
  },
  '–í–∏–ø': {
    'spec': [
      '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞',
      '–≠–∫—Ä–∞–Ω(44 –¥—é–π–º–æ–≤, FullHD)',
      '–£–¥–æ–±–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å üõè',
      '–§–∏–ª—å–º –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ üé¨',
      '–í–∏–Ω–æ Santo Stefano üç∑',
      '–ö–∞–ª—å—è–Ω –Ω–∞ –≤—ã–±–æ—Ä üí®'
    ],
    'price': 2490
  },
  '–ü—Ä–µ–º–∏—É–º': {
    'spec': [
      '–≠–∫—Ä–∞–Ω (44 –¥—é–π–º–∞4K HD) ',
      '–£–¥–æ–±–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—åüõè',
      '–õ—é–±–æ–π —Ñ–∏–ª—å–º üçø ',
      '–í–∏–Ω–æ (Torres Caka Sargre de Toro) üç∑',
      '–ö–∞–ª—å—è–Ω –Ω–∞ –≤—ã–±–æ—Ä üí®',
      '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã üçì',
      '–†–æ–ª–ª—ã/—Å—É—à–∏ üç±',
    ],
    'price': 3290
  },
  '–ü—Ä–µ–º–∏—É–º +': {
    'spec': [
      '–≠–∫—Ä–∞–Ω (48 –¥—é–π–º–∞4K HD) ',
      '–£–¥–æ–±–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—åüõè',
      '–õ—é–±–æ–π —Ñ–∏–ª—å–º üçø ',
      '–í–∏–Ω–æ (Torres Caka Sargre de Toro) üç∑',
      '–ö–∞–ª—å—è–Ω –Ω–∞ –≤—ã–±–æ—Ä üí®',
      '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä—É–∫—Ç—ã üçì',
      '–†–æ–ª–ª—ã/—Å—É—à–∏ üç±',
      '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ ü•Ç',
      '–ü–∞—á–∫–∞ Durex',
    ],
    'price': 4990
  },

}

cities = {
  'moskow': '–ú–æ—Å–∫–≤–∞',
  'saint-petersburg': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
  'kazan': '–ö–∞–∑–∞–Ω—å',
  'rostov': '–†–æ—Å—Ç–æ–≤',
  'saratov': '–°–∞—Ä–∞—Ç–æ–≤',
  'kaliningrad': '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥',
  'samara': '–°–∞–º–∞—Ä–∞',
  'ulyanovsk': '–£–ª—å—è–Ω–æ–≤—Å–∫',
  'omsk': '–û–º—Å–∫',
  'nizhniy-novgorod': '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥',
  'krasnodar': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'
}

# –∫–ª—é—á–∏ –¥–ª—è —Ñ–∏–ª—å–º–∞ = –ª—é–±–æ–µ —á–∏—Å–ª–æ
films = {
  '1': "–ö–∞—Å–∞–±–ª–∞–Ω–∫–∞ / Casablanca (1942)",
  '2': "–ê–º–µ–ª–∏ / Le fabuleux destin d'Am√©lie Poulain (2001)",
  '3': "–î–µ–≤—á–∞—Ç–∞ (1961)",
  '4': "–ü–æ—é—â–∏–µ –ø–æ–¥ –¥–æ–∂–¥–µ–º / Singin' in the Rain (1952)",
  '5': "–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø / Forrest Gump (1994)",
  '6': "–û–≥–Ω–∏ –±–æ–ª—å—à–æ–≥–æ –≥–æ—Ä–æ–¥–∞ / City Lights (1931)",
  '7': "–í–µ—á–Ω–æ–µ —Å–∏—è–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —Ä–∞–∑—É–º–∞ / Eternal Sunshine of the Spotless Mind (2004)",
  '8': "–ï—â–µ —Ä–∞–∑ –ø—Ä–æ –ª—é–±–æ–≤—å (1967)",
  '9': "–í –¥–∂–∞–∑–µ —Ç–æ–ª—å–∫–æ –¥–µ–≤—É—à–∫–∏ / Some Like It Hot (1959)",
  '10': "–£–º–Ω–∏—Ü–∞ –£–∏–ª–ª –•–∞–Ω—Ç–∏–Ω–≥ / Good Will Hunting (1997)",
  '11': "–¢—Ä–∏ –∏–¥–∏–æ—Ç–∞ / 3 Idiots (2009)",
  '12': "–ö–≤–∞—Ä—Ç–∏—Ä–∞ / The Apartment (1960)",
  '13': "–ó–µ–º–ª—è–Ω–∏—á–Ω–∞—è –ø–æ–ª—è–Ω–∞ / Smultronst√§llet (1957)",
  '14': "–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω / Manhattan (1979)",
  '15': "–ö—Ä–∞—Å–Ω—ã–µ –±–∞—à–º–∞—á–∫–∏ / The Red Shoes (1948)",
  '16': "–†–∏–º—Å–∫–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã / Roman Holiday (1953)",
  '17': "–°–ª—É–∂–µ–±–Ω—ã–π —Ä–æ–º–∞–Ω (1977)",
  '18': "–ú–æ—Å–∫–≤–∞ —Å–ª–µ–∑–∞–º –Ω–µ –≤–µ—Ä–∏—Ç (1980)",
  '19': "–õ—é–±–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ / Fa yeung nin wah (2000)",
  '20': "–ò—Ä–æ–Ω–∏—è —Å—É–¥—å–±—ã, –∏–ª–∏ –° –ª–µ–≥–∫–∏–º –ø–∞—Ä–æ–º! (1975)",
  '21': "–£–∫—Ä–æ—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–ø—Ç–∏–≤–æ–π / The Taming of the Shrew (1967)",
  '22': "–ü–æ–∫—Ä–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞ (1982)",
  '23': "–¢–∏—Ç–∞–Ω–∏–∫ / Titanic (1997)",
  '24': "–≠—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –æ–¥–Ω–∞–∂–¥—ã –Ω–æ—á—å—é / It Happened One Night (1934)",
  '25': "–®–æ–∫–æ–ª–∞–¥ / Chocolat (2000)",
}

# –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞(–≤—Ä–µ–º–µ–Ω–∏) –≤ times —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç bool –∑–Ω–∞—á–µ–Ω–∏–µ: True - –∑–∞–Ω—è—Ç–æ, False - –Ω–µ –∑–∞–Ω—è—Ç–æ
# inline keyboard —Å –≤—Ä–µ–º–µ–Ω–µ–º –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–Ω—è—Ç—ã
times = {
  '00:00': False,
  '02:00': False,
  '04:00': False,
  '06:00': False,
  '08:00': False,
  '10:00': False,
  '14:00': False,
  '18:00': False,
  '20:00': False,
  '22:00': False,
}

# bot config part
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
  tchoice = State()
  city_choice = State()
  film_choice = State()
  time_choice = State()

@dp.message_handler(Text(contains='/start'), state='*')
async def start_func(message: types.Message):
  await Form.tchoice.set()
  await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é–µ—Ç –±–æ—Ç *OnlyFilms!*', parse_mode='Markdown')
  await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ:')

  keys = list(tariffs.keys())
  keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

  for i in range(len(keys)):
    keyboard.add(types.KeyboardButton(keys[i]))

    text = f'-------------*{keys[i].upper()}*-------------' + '\n' + f'{keys[i]} —Ç–∞—Ä–∏—Ñ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:' + "".join("\n  -*"+e+"*" for e in tariffs[keys[i]]['spec']) + '\n' + f'–¶–µ–Ω–∞: *{tariffs[keys[i]]["price"]}* üíµ'

    if i != len(keys)-1:
      await message.answer(text, parse_mode='Markdown')
    else:
      await message.answer(text, parse_mode='Markdown', reply_markup=keyboard)
    
@dp.message_handler(lambda message: message.text in list(tariffs.keys()), state=Form.tchoice)
async def end_of_choice(message: types.Message, state: FSMContext):
  await Form.city_choice.set()
  async with state.proxy() as data:
    data['total_price'] = tariffs[message.text]['price']
  await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {message.text}', reply_markup=types.ReplyKeyboardRemove())
  inline_keyboard = types.InlineKeyboardMarkup()
  for city in cities.keys():
    inline_keyboard.add(types.InlineKeyboardButton(cities[city], callback_data=city))
  await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=inline_keyboard)

@dp.callback_query_handler(lambda c: c.data in list(cities.keys()), state=Form.city_choice)
async def citytofilm_clb(callback_query: types.CallbackQuery):
  await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
  await bot.send_message(callback_query.from_user.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: *{cities[callback_query.data]}*', parse_mode='Markdown')
  await Form.film_choice.set()
  film_inline_keyboard = types.InlineKeyboardMarkup()
  for key in films.keys():
    film_inline_keyboard.add(types.InlineKeyboardButton(films[key], callback_data=key))
  await bot.send_message(callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º: ', reply_markup=film_inline_keyboard)

@dp.callback_query_handler(lambda c: c.data in list(films.keys()), state=Form.film_choice)
async def filmtotime_clb(callback_query: types.CallbackQuery):
  await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
  await bot.send_message(callback_query.from_user.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å–º: *{films[callback_query.data]}*', parse_mode='Markdown')
  await Form.time_choice.set()
  time_inline_keyboard = types.InlineKeyboardMarkup()
  for key in times.keys():
    if not times[key]:
      time_inline_keyboard.add(types.InlineKeyboardButton(text=key, callback_data=key))
  await bot.send_message(callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è: ', reply_markup=time_inline_keyboard)
  

@dp.callback_query_handler(lambda c: c.data in list(times.keys()), state=Form.time_choice)
async def filmtotime_clb(callback_query: types.CallbackQuery, state: FSMContext):
  await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
  cancel_reply_keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True).add(types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞/–°–±—Ä–æ—Å –∫–æ—Ä–∑–∏–Ω—ã/–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ /start',))
  await bot.send_message(callback_query.from_user.id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: *{callback_query.data}*', parse_mode='Markdown', reply_markup=cancel_reply_keyboard)
  cart_inline_keyboard = types.InlineKeyboardMarkup(row_width=2)
  cart_inline_keyboard.add(types.InlineKeyboardButton(text='–û–ø–ª—Ç–∞–∏—Ç—å', url='google.com'))
  async with state.proxy() as data:
    await bot.send_message(callback_query.from_user.id, text=f'*–ö –û–ü–õ–ê–¢–ï: {data["total_price"]}* —Ä—É–±. üíµ' + '\n–ù–ï –ó–ê–ë–£–î–¨–¢–ï –ù–ê–ü–ò–°–ê–¢–¨ –ù–ò–ö –¢–ï–õ–ï–ì–†–ê–ú–ê –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–• –ö –û–ü–õ–ê–¢–ï!!', parse_mode='Markdown', reply_markup=cart_inline_keyboard)
  

# startup function
async def on_startup(dispatcher):
  await bot.set_webhook(wh_url, drop_pending_updates=True)

# shutdown function
async def on_shutdown(dispatcher):
  logging.warning('turning off')
  await bot.delete_webhook()
  await dispatcher.storage.close()
  logging.warning('bye ;)')

if __name__ == '__main__':
  print(whapp_host, whapp_port)
  start_webhook(
    dispatcher=dp,
    webhook_path=wh_path,
    skip_updates=True,
    on_startup=on_startup,
    on_shutdown=on_shutdown,
    host=whapp_host,
    port=whapp_port
  )